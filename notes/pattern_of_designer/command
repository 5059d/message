command
命令模式
		将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。
	

		
abstract class Command
{
	protected Receiver receiver;
	public Command(Receiver receiver)
	{
		this.receiver = receiver;
	}
	abstract public void Execute();
}
class ConcreteCommand : Command
{
	public ConcreteCommand(Receiver receiver) : base(receiver)
	{}
	public override void Execute()
	{
		receiver.Action();
	}
}
class Invoker
{
	private Command command;
	public void SetCommand(Command command)
	{
		this.command =  command;
	}
	public void ExcuteCommand()
	{
		command.Excute();
	}
}
class Receiver
{
	public Action()
	{
		Console.WriteLine("执行请求");
	}
}
static void main()
{
	Receiver r = new Receiver();
	Command c = new ConcreteCommand(r);
	Invoker i =  new Invoker();
	i.SetCommand(c);
	i.ExcuteCommand(c);

	Console.Read();
}


################################################################################
#/usr/bin/python
#
#command
#

class Receiver:

	def Action()
		
		print "ACTION!"
	
class Command:

	def __init__(self,receiver):
		self.receiver = receiver
	def Excute(self):
		pass

class ConcreteCommand(Command):
	def __init__(self,receiver):
		super(ConcreteCommand,self).__init__(receiver)
	def Excute(self):
		slef.receiver.Action()

class Invoker:
	def __init__(self):
		self.command = ''
	def SetCommand(self,command):
		self.command = command
	def ExcuteCommand(self):
		self.command.Excute()

if __name__=='__main__':
	r = Receiver()
	c = ConcreteCommand(r)
	i = Invoker()
	i.SetCommand(c)
	i.ExcuteCommand()


###############################################################################



