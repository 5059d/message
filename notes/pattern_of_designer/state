



abstract class state
{
	public abstract void Handle(Context context);
}
class ConcretStateA:state
{
	public override void Handle(Context context)
	{
		context.state = new concretStateB();
	}
}
class ConcretStateB:state
{
	public override void Handle(Context context)
	{
		context.state = new concretStateA();
	}
}
class Context
{
	private State state
	public Context(State state)
	{
		this.state = state
	}
	public State state
	{
		get
		{	
			return state;
		}
		set
		{
			state = value;
			Console.Writeline("当前状态" + state.GetType().Naeme());
		}
	
		
	}
	public void Request（）
	{
		state.Handle(this);
	}
}
static void main(string[] args)
{
	Context c = new Context( new ConcretStateA());
	c.Request();
	c.Request();
	c.Request();
	c.Request();
	Console.Read();
}

###########################################################################################################################################################################################
#!/usr/bin/python

#
#test state designed
#
class Context:
    #self.state = State()
    def __init__(self,state):
        self.state = state
    def __set__(self,state):
        self.state = state
    def __get__(self):
        return self.state
    def Request(self):
        return self.state.Handler(self)
class State:
    def Handler(self,context):
        print "father access"
class ConcreteStateA(State):
    def Handler(self,context):
        print "in State A"
        context.state = ConcreteStateB()
class ConcreteStateB(State):
    def Handler(self,context):
        print "in  State B"
        context.state = ConcreteStateA()

if __name__ == "__main__":
    c = Context(ConcreteStateA())
    c.Request()
    c.Request()
    c.Request()
    c.Request()
    print "end"  

########################################################################################################################################################################################

#!/usr/bin/python
#
#new code of pattern of state
#
import os,sys
sys.path.append(os.getcwd())

class State(object):

	def Handle(self):

		print "Handle of State"

class ConcreteStateA(State):
	
	def Handle(self):

		print "Handle of ConcreteStateA"

class ConcreteStateB(State):

	def Handle(self):

		print "Handle of ConcreteStateB"

class Context(object):


	def __init__(self,state_list):

		self.state_list = state_list
	
		self.state = ''

	def Request(self):

		self.state = self.__gen_state__()

		if self.state:

			self.state.Handle()

		
	def __gen_state__(self):


		state_module = __import__(os.path.basename(sys.argv[0]).split('.py')[0])

		if len(self.state_list) > 0:
			
			self.state = getattr(state_module,self.state_list[0])()

			self.state_list.remove(self.state_list[0])
			
			return self.state

		else:
			print 'no state in state_list'
			return ''
			
if __name__ == '__main__' :

	state_list = ['ConcreteStateA','ConcreteStateA']

	context = Context(state_list)

	for i in xrange(len(state_list)):

		context.Request()		
			

#####################################################################################
